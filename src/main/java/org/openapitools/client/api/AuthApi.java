/*
 * Lagrello API
 * API specification for Lagrello, a simple to use authentication service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@lagrello.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.TotpEnableRequest;
import org.openapitools.client.model.TotpEnableResponse;
import org.openapitools.client.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthApi {
    private ApiClient localVarApiClient;

    public AuthApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for usersEmailAuth
     * @param payload The magic link token the user sent (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns user data for authenticated user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> End users token is wrong, DO NOT authenticate user </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The access token used to access resource is wrong </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user could not be found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersEmailAuthCall(String payload, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/email";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (payload != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payload", payload));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersEmailAuthValidateBeforeCall(String payload, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling usersEmailAuth(Async)");
        }
        

        okhttp3.Call localVarCall = usersEmailAuthCall(payload, _callback);
        return localVarCall;

    }

    /**
     * Gives back user data for the magic link token
     * 
     * @param payload The magic link token the user sent (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns user data for authenticated user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> End users token is wrong, DO NOT authenticate user </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The access token used to access resource is wrong </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user could not be found </td><td>  -  </td></tr>
     </table>
     */
    public User usersEmailAuth(String payload) throws ApiException {
        ApiResponse<User> localVarResp = usersEmailAuthWithHttpInfo(payload);
        return localVarResp.getData();
    }

    /**
     * Gives back user data for the magic link token
     * 
     * @param payload The magic link token the user sent (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns user data for authenticated user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> End users token is wrong, DO NOT authenticate user </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The access token used to access resource is wrong </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user could not be found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> usersEmailAuthWithHttpInfo(String payload) throws ApiException {
        okhttp3.Call localVarCall = usersEmailAuthValidateBeforeCall(payload, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gives back user data for the magic link token (asynchronously)
     * 
     * @param payload The magic link token the user sent (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns user data for authenticated user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> End users token is wrong, DO NOT authenticate user </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The access token used to access resource is wrong </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user could not be found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersEmailAuthAsync(String payload, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersEmailAuthValidateBeforeCall(payload, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersEmailSend
     * @param userId Id of the user you want to send magic link to (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Email to user has been sent successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The payload of the request is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The access token used to access resource is wrong </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user could not be found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersEmailSendCall(String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{userId}/email"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersEmailSendValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersEmailSend(Async)");
        }
        

        okhttp3.Call localVarCall = usersEmailSendCall(userId, _callback);
        return localVarCall;

    }

    /**
     * This endpoint will be used when you want to send a magic login link to specified user
     * 
     * @param userId Id of the user you want to send magic link to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Email to user has been sent successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The payload of the request is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The access token used to access resource is wrong </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user could not be found </td><td>  -  </td></tr>
     </table>
     */
    public void usersEmailSend(String userId) throws ApiException {
        usersEmailSendWithHttpInfo(userId);
    }

    /**
     * This endpoint will be used when you want to send a magic login link to specified user
     * 
     * @param userId Id of the user you want to send magic link to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Email to user has been sent successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The payload of the request is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The access token used to access resource is wrong </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user could not be found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usersEmailSendWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = usersEmailSendValidateBeforeCall(userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * This endpoint will be used when you want to send a magic login link to specified user (asynchronously)
     * 
     * @param userId Id of the user you want to send magic link to (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Email to user has been sent successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The payload of the request is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The access token used to access resource is wrong </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user could not be found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersEmailSendAsync(String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersEmailSendValidateBeforeCall(userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersTotpAuth
     * @param userId Id of the user you want to verify TOTP code for (required)
     * @param payload The totp token the user sent (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - Returns the user information if the totp token is correct </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> End users token is wrong, DO NOT authenticate user </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The access token used to access resource is wrong </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user could not be found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersTotpAuthCall(String userId, String payload, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{userId}/totp"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (payload != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payload", payload));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersTotpAuthValidateBeforeCall(String userId, String payload, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersTotpAuth(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling usersTotpAuth(Async)");
        }
        

        okhttp3.Call localVarCall = usersTotpAuthCall(userId, payload, _callback);
        return localVarCall;

    }

    /**
     * Verify users TOTP token
     * 
     * @param userId Id of the user you want to verify TOTP code for (required)
     * @param payload The totp token the user sent (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - Returns the user information if the totp token is correct </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> End users token is wrong, DO NOT authenticate user </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The access token used to access resource is wrong </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user could not be found </td><td>  -  </td></tr>
     </table>
     */
    public User usersTotpAuth(String userId, String payload) throws ApiException {
        ApiResponse<User> localVarResp = usersTotpAuthWithHttpInfo(userId, payload);
        return localVarResp.getData();
    }

    /**
     * Verify users TOTP token
     * 
     * @param userId Id of the user you want to verify TOTP code for (required)
     * @param payload The totp token the user sent (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - Returns the user information if the totp token is correct </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> End users token is wrong, DO NOT authenticate user </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The access token used to access resource is wrong </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user could not be found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> usersTotpAuthWithHttpInfo(String userId, String payload) throws ApiException {
        okhttp3.Call localVarCall = usersTotpAuthValidateBeforeCall(userId, payload, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verify users TOTP token (asynchronously)
     * 
     * @param userId Id of the user you want to verify TOTP code for (required)
     * @param payload The totp token the user sent (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - Returns the user information if the totp token is correct </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> End users token is wrong, DO NOT authenticate user </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The access token used to access resource is wrong </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user could not be found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersTotpAuthAsync(String userId, String payload, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersTotpAuthValidateBeforeCall(userId, payload, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersTotpToggle
     * @param userId Id of the user you want to enable TOTP for (required)
     * @param totpEnableRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Will return user&#39;s secret key and a url where QR-code image can be found </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success when disabling TOTP for user </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The access token used to access resource is wrong </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user could not be found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersTotpToggleCall(String userId, TotpEnableRequest totpEnableRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = totpEnableRequest;

        // create path and map variables
        String localVarPath = "/v1/users/{userId}/totp"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersTotpToggleValidateBeforeCall(String userId, TotpEnableRequest totpEnableRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersTotpToggle(Async)");
        }
        

        okhttp3.Call localVarCall = usersTotpToggleCall(userId, totpEnableRequest, _callback);
        return localVarCall;

    }

    /**
     * Enables or disables Time-based One-Time Password authentication method for specified user
     * When you want your users to be able to use TOTP authentication you need to send enable set to true as payload to this endpoint. To turn off TOTP set enable to false. When enabling you will recieve the secret key and a QR code link. The QR code you need to show your user for them to scan.
     * @param userId Id of the user you want to enable TOTP for (required)
     * @param totpEnableRequest  (optional)
     * @return TotpEnableResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Will return user&#39;s secret key and a url where QR-code image can be found </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success when disabling TOTP for user </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The access token used to access resource is wrong </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user could not be found </td><td>  -  </td></tr>
     </table>
     */
    public TotpEnableResponse usersTotpToggle(String userId, TotpEnableRequest totpEnableRequest) throws ApiException {
        ApiResponse<TotpEnableResponse> localVarResp = usersTotpToggleWithHttpInfo(userId, totpEnableRequest);
        return localVarResp.getData();
    }

    /**
     * Enables or disables Time-based One-Time Password authentication method for specified user
     * When you want your users to be able to use TOTP authentication you need to send enable set to true as payload to this endpoint. To turn off TOTP set enable to false. When enabling you will recieve the secret key and a QR code link. The QR code you need to show your user for them to scan.
     * @param userId Id of the user you want to enable TOTP for (required)
     * @param totpEnableRequest  (optional)
     * @return ApiResponse&lt;TotpEnableResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Will return user&#39;s secret key and a url where QR-code image can be found </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success when disabling TOTP for user </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The access token used to access resource is wrong </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user could not be found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TotpEnableResponse> usersTotpToggleWithHttpInfo(String userId, TotpEnableRequest totpEnableRequest) throws ApiException {
        okhttp3.Call localVarCall = usersTotpToggleValidateBeforeCall(userId, totpEnableRequest, null);
        Type localVarReturnType = new TypeToken<TotpEnableResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enables or disables Time-based One-Time Password authentication method for specified user (asynchronously)
     * When you want your users to be able to use TOTP authentication you need to send enable set to true as payload to this endpoint. To turn off TOTP set enable to false. When enabling you will recieve the secret key and a QR code link. The QR code you need to show your user for them to scan.
     * @param userId Id of the user you want to enable TOTP for (required)
     * @param totpEnableRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Will return user&#39;s secret key and a url where QR-code image can be found </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success when disabling TOTP for user </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The access token used to access resource is wrong </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user could not be found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersTotpToggleAsync(String userId, TotpEnableRequest totpEnableRequest, final ApiCallback<TotpEnableResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersTotpToggleValidateBeforeCall(userId, totpEnableRequest, _callback);
        Type localVarReturnType = new TypeToken<TotpEnableResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
