/*
 * Lagrello API
 * API specification for Lagrello, a simple to use authentication service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@lagrello.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateUserRequest;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.UpdateUserRequest;
import org.openapitools.client.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersApi {
    private ApiClient localVarApiClient;

    public UsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for usersCreate
     * @param createUserRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a new user </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The access token used to access resource is wrong </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned when user already exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersCreateCall(CreateUserRequest createUserRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createUserRequest;

        // create path and map variables
        String localVarPath = "/v1/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersCreateValidateBeforeCall(CreateUserRequest createUserRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = usersCreateCall(createUserRequest, _callback);
        return localVarCall;

    }

    /**
     * Creates a user in tenant, tenant is determined from the token
     * 
     * @param createUserRequest  (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a new user </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The access token used to access resource is wrong </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned when user already exist </td><td>  -  </td></tr>
     </table>
     */
    public User usersCreate(CreateUserRequest createUserRequest) throws ApiException {
        ApiResponse<User> localVarResp = usersCreateWithHttpInfo(createUserRequest);
        return localVarResp.getData();
    }

    /**
     * Creates a user in tenant, tenant is determined from the token
     * 
     * @param createUserRequest  (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a new user </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The access token used to access resource is wrong </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned when user already exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> usersCreateWithHttpInfo(CreateUserRequest createUserRequest) throws ApiException {
        okhttp3.Call localVarCall = usersCreateValidateBeforeCall(createUserRequest, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a user in tenant, tenant is determined from the token (asynchronously)
     * 
     * @param createUserRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a new user </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The access token used to access resource is wrong </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned when user already exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersCreateAsync(CreateUserRequest createUserRequest, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersCreateValidateBeforeCall(createUserRequest, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersDelete
     * @param userId Id of the user you want to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted specified user </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The access token used to access resource is wrong </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user could not be found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersDeleteCall(String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersDeleteValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersDelete(Async)");
        }
        

        okhttp3.Call localVarCall = usersDeleteCall(userId, _callback);
        return localVarCall;

    }

    /**
     * Deletes specified user
     * 
     * @param userId Id of the user you want to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted specified user </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The access token used to access resource is wrong </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user could not be found </td><td>  -  </td></tr>
     </table>
     */
    public void usersDelete(String userId) throws ApiException {
        usersDeleteWithHttpInfo(userId);
    }

    /**
     * Deletes specified user
     * 
     * @param userId Id of the user you want to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted specified user </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The access token used to access resource is wrong </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user could not be found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usersDeleteWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = usersDeleteValidateBeforeCall(userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes specified user (asynchronously)
     * 
     * @param userId Id of the user you want to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted specified user </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The access token used to access resource is wrong </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user could not be found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersDeleteAsync(String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersDeleteValidateBeforeCall(userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersGet
     * @param userId userId of user you want to fetch information about (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns user data for specified user </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The access token used to access resource is wrong </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user could not be found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersGetCall(String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersGetValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersGet(Async)");
        }
        

        okhttp3.Call localVarCall = usersGetCall(userId, _callback);
        return localVarCall;

    }

    /**
     * Returns specified user
     * 
     * @param userId userId of user you want to fetch information about (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns user data for specified user </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The access token used to access resource is wrong </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user could not be found </td><td>  -  </td></tr>
     </table>
     */
    public User usersGet(String userId) throws ApiException {
        ApiResponse<User> localVarResp = usersGetWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Returns specified user
     * 
     * @param userId userId of user you want to fetch information about (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns user data for specified user </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The access token used to access resource is wrong </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user could not be found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> usersGetWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = usersGetValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns specified user (asynchronously)
     * 
     * @param userId userId of user you want to fetch information about (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns user data for specified user </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The access token used to access resource is wrong </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user could not be found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersGetAsync(String userId, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersGetValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUpdate
     * @param userId Id of the user you want to update (required)
     * @param updateUserRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated specified user </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The access token used to access resource is wrong </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user could not be found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUpdateCall(String userId, UpdateUserRequest updateUserRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateUserRequest;

        // create path and map variables
        String localVarPath = "/v1/users/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUpdateValidateBeforeCall(String userId, UpdateUserRequest updateUserRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = usersUpdateCall(userId, updateUserRequest, _callback);
        return localVarCall;

    }

    /**
     * Updates specified user
     * 
     * @param userId Id of the user you want to update (required)
     * @param updateUserRequest  (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated specified user </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The access token used to access resource is wrong </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user could not be found </td><td>  -  </td></tr>
     </table>
     */
    public User usersUpdate(String userId, UpdateUserRequest updateUserRequest) throws ApiException {
        ApiResponse<User> localVarResp = usersUpdateWithHttpInfo(userId, updateUserRequest);
        return localVarResp.getData();
    }

    /**
     * Updates specified user
     * 
     * @param userId Id of the user you want to update (required)
     * @param updateUserRequest  (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated specified user </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The access token used to access resource is wrong </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user could not be found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> usersUpdateWithHttpInfo(String userId, UpdateUserRequest updateUserRequest) throws ApiException {
        okhttp3.Call localVarCall = usersUpdateValidateBeforeCall(userId, updateUserRequest, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates specified user (asynchronously)
     * 
     * @param userId Id of the user you want to update (required)
     * @param updateUserRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated specified user </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The access token used to access resource is wrong </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user could not be found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUpdateAsync(String userId, UpdateUserRequest updateUserRequest, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUpdateValidateBeforeCall(userId, updateUserRequest, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
